import os
import csv
import requests
import time
from datetime import datetime
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = os.getenv('ZBMATH_API_KEY')  # Environment variable –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
AUTHORS_FILE = "authors.csv"
OLD_PUB_FILE = "old_publications.csv"
NEW_PUB_FILE = "new_publications.csv"
FULL_PUB_FILE = f"publications_{datetime.now().strftime('%Y%m%d')}.csv"

def get_author_publications(author_id):
    """–ò–∑–≤–ª–∏—á–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏—Ç–µ –∑–∞ –¥–∞–¥–µ–Ω –∞–≤—Ç–æ—Ä –æ—Ç zbMATH API"""
    url = f"https://zbmath.org/api/v1/authors/{author_id}/publications/?apikey={API_KEY}&format=json"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json().get('publications', [])
    except requests.exceptions.RequestException as e:
        print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ {author_id}: {str(e)}")
        return []

def process_publication(pub):
    """–û–±—Ä–∞–±–æ—Ç–≤–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ç–∞"""
    return {
        'zbl_id': pub.get('zbl_id', ''),
        'title': pub.get('title', {}).get('text', ''),
        'year': pub.get('year', ''),
        'authors': '; '.join(a['display_name'] for a in pub.get('authors', [])),
        'source': pub.get('journal', {}).get('name', ''),
        'link': f"https://zbmath.org/{pub.get('zbl_id', '')}"
    }

def fetch_all_publications():
    """–ò–∑–≤–ª–∏—á–∞ –≤—Å–∏—á–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ"""
    all_publications = []
    
    with open(AUTHORS_FILE, 'r') as f:
        authors = list(csv.DictReader(f))
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ {len(authors)} –∞–≤—Ç–æ—Ä–∞...")
    
    for idx, author in enumerate(authors, 1):
        print(f"{idx}/{len(authors)}: –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ {author['full_name']} ({author['zbmath_id']})")
        pubs = get_author_publications(author['zbmath_id'])
        
        for pub in pubs:
            pub_data = process_publication(pub)
            pub_data['author_id'] = author['zbmath_id']
            all_publications.append(pub_data)
        
        time.sleep(1.5)  # –°–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ rate limits
    
    # –ó–∞–ø–∏—Å –Ω–∞ –ø—ä–ª–Ω–∏—è CSV
    if all_publications:
        with open(FULL_PUB_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=all_publications[0].keys())
            writer.writeheader()
            writer.writerows(all_publications)
    
    print(f"\n‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∏ {len(all_publications)} –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ä–≤ {FULL_PUB_FILE}")
    return all_publications

def find_new_publications(all_pubs):
    """–ù–∞–º–∏—Ä–∞ –Ω–æ–≤–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ø—Ä—è–º–æ —Å—Ç–∞—Ä–∏—è —Ñ–∞–π–ª"""
    if not os.path.exists(OLD_PUB_FILE):
        print("\n‚ö†Ô∏è –ù—è–º–∞ —Å—Ç–∞—Ä —Ñ–∞–π–ª –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. –í—Å–∏—á–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —â–µ —Å–µ —Å—á–∏—Ç–∞—Ç –∑–∞ –Ω–æ–≤–∏.")
        new_publications = all_pubs
    else:
        # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        old_pubs = pd.read_csv(OLD_PUB_FILE)
        old_zbl_ids = set(old_pubs['zbl_id']) if not old_pubs.empty else set()
        
        # –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏—Ç–µ
        new_publications = [pub for pub in all_pubs if pub['zbl_id'] not in old_zbl_ids]
    
    # –ó–∞–ø–∏—Å –Ω–∞ –Ω–æ–≤–∏—Ç–µ
    if new_publications:
        with open(NEW_PUB_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=new_publications[0].keys())
            writer.writeheader()
            writer.writerows(new_publications)
    
    print(f"\nüîç –ù–∞–º–µ—Ä–µ–Ω–∏ {len(new_publications)} –Ω–æ–≤–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    return new_publications

def main():
    print("="*50)
    print(" –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –Ω–∞—É—á–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    print(" –í –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –Ω–∞ zbMATH")
    print("="*50)
    
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∞–∫–æ –ª–∏–ø—Å–≤–∞—Ç
    if not os.path.exists(AUTHORS_FILE):
        with open(AUTHORS_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=['full_name', 'zbmath_id'])
            writer.writeheader()
            writer.writerow({'full_name': 'Maya Stoyanova', 'zbmath_id': 'stoyanova.maya'})
            writer.writerow({'full_name': 'Ivan Ivanov', 'zbmath_id': 'ivanov.ivan'})
        print(f"\n‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω –ø—Ä–∏–º–µ—Ä–µ–Ω {AUTHORS_FILE}")
    
    if not os.path.exists(OLD_PUB_FILE):
        open(OLD_PUB_FILE, 'a').close()  # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∞–∑–µ–Ω —Ñ–∞–π–ª
        print(f"‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω –ø—Ä–∞–∑–µ–Ω {OLD_PUB_FILE} –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    
    # –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞
    all_pubs = fetch_all_publications()
    new_pubs = find_new_publications(all_pubs)
    
    # –ö—Ä–∞–µ–Ω –∏–∑—Ö–æ–¥
    print("\n" + "="*50)
    print(" –î–µ–π—Å—Ç–≤–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏—Ö–∞ —É—Å–ø–µ—à–Ω–æ!")
    if new_pubs:
        print(f"üåü –û—Ç–∫—Ä–∏—Ç–∏ —Å–∞ {len(new_pubs)} –ù–û–í–ò –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ä–≤ {NEW_PUB_FILE}")
    else:
        print("‚ÑπÔ∏è –ù—è–º–∞ –Ω–æ–≤–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    print("="*50)

if __name__ == "__main__":
    main()
